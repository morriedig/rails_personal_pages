<div class="first-block">
  <canvas id="canvas">
  </canvas>
</div>
<div class="second-block">
  <%= image_tag("vc.png")%>
  <p>
    Hi, I'm Morrie.<br>
    A website developer
  </p>
</div>
<div class="third-block">
  <h2>What can i do ?</h2>
  <div class="tagBall">
    <a class="my-self">Morrie</a>
    <a class="tag" href="#">Javascript</a>
    <a class="tag" href="#">JQuery</a>
    <a class="tag" href="#">Ruby</a>
    <a class="tag" href="#">MySql</a>
    <a class="tag" href="#">C#</a>
    <a class="tag" href="#">Ruby on Rails</a>
    <a class="tag" href="#">React Native</a>
    <a class="tag" href="#">Vue.js</a>
    <a class="tag" href="#">GCP</a>
    <a class="tag" href="#">AWS</a>
  </div>
</div>
<div class="forth-block">
  <h2>Contact with me</h2>
  <div class="envelope">
    <div class="left-message">
      <p class="name">
        Morrie Huang
      </p>
      <p>
        Website Developer <br>
        App Developer <br>
        AI Engineer <br><br>
      </p>
      <p>
        Huangyudi80@gmail.com
      </p>
    </div>
    <div class="right-message">
      <%= image_tag("logo.png") %>
    </div>
  </div>
</div>
<footer>
  <div class="mail">
    <p>huangyudi80@gmail.com</p>
  </div>
</footer>
<style>
  p{
    margin: 0;
    padding: 0;
  }
  body{
    background-color: #e5e5e5;
    margin: 0;
    padding: 0;
    font-family: "微軟黑體";
  /*  background-image: url("<%= asset_path("body-background.jpg")%>") */
  }
  .first-block{
    background-image: url("<%= asset_path("background.jpg") %>");
    background-size: cover;
    width: 100%;
    height: 100vh;
    margin: 0;
    border: 0;
  }
  #canvas{
    margin: 0;
    box-sizing: border-box;
    overflow: hidden;
    /* border: 1px solid #fff; */
    width: 100%;
    height: 100%;
  }
  .second-block{
    background-color: #f3f2f1;
    padding-top: 80px;
    padding-bottom: 80px;
  }
  .second-block img{
    width: 150px;
    height: 150px;
    display: block;
    margin: 0 auto;
  }
  .second-block p{
    margin-top: 18px;
    text-align:center;
    font-size: 28px;
    font-family: "微軟黑體";
  }
  .tagBall {
    width: 500px;
    height: 500px;
    margin: 0 auto;
    position: relative;
  }
  .my-self{
    display: block;
    position: absolute;
    top: 230px;
    left: 210px;
    color: #FFF;
    text-decoration: none;
    font-size: 36px;
    font-family: "微軟黑體";
    font-weight: bold;
  }
  .third-block h2{
    text-align: center;
    font-size: 36px;
    margin-bottom: 0;
  }
  .tag {
      display: block;
      position: absolute;
      left: 0px;
      top: 0px;
      color: #000;
      text-decoration: none;
      font-size: 22px;
      font-family: "微軟黑體";
      font-weight: bold;
      will-change: transform;
  }
  .tag:hover {
      border: 1px solid #666;
  }

  .forth-block{
    width: 100%;
    background-color: #f3f3f3;
    padding-top: 30px;
    padding-bottom: 50px;
    /* height: 90vh; */
  }
  .forth-block h2{
    text-align: center;
    font-size: 36px;
  }
  .forth-block .envelope{
    background-image: url("<%=  asset_path("envelope.jpg")%>");
    background-size: contain;
    background-repeat: no-repeat;
    width: 780px;
    height: 430px;
    margin: 30px auto 0;
    position: relative;
  }
  .forth-block .envelope .left-message{
    position: absolute;
    top: 220px;
    left: 80px;
  }

  .forth-block .envelope .left-message .name{
    font-size: 22px;
  }

  .forth-block .envelope .right-message{
    position: absolute;
    right: 50px;
    top: 50px;
  }

  .forth-block .envelope .right-message img{
    width: 80px;
    height: 80px;
  }

  footer{
    color: #e1e1e1;
    width: 100%;
    background-color: black;
  }
  footer p {
    margin: 0;
    padding: 10px 0 18px;
    text-align: center;
  }
</style>

<script>
  $(document).ready(function(){
    window.onload = function(){
      canvas = document.getElementById("canvas");
      context = canvas.getContext("2d");
      focallength = 800;

      var dots = getimgData("Morrie");
      var pause = false;
      initAnimate();

      function initAnimate(){
        dots.forEach(function(){
          // 設定隨機的 x, y, z 跟 tx, ty, tz
          this.x = Math.random() * canvas.width;
          this.y = Math.random() * canvas.height;
          this.z = Math.random() * focallength * 2 - focallength;
          this.tx = Math.random() * canvas.width;
          this.ty = Math.random() * canvas.height;
          this.tz = Math.random() * focallength * 2 - focallength;
          // x,y,y 隨機設定好以後，設定路線
          this.paint();
        });
        // 寫出文字
        animate();
      }

      function animate(){
        var thisTime = +new Date();
        context.clearRect(0, 0, canvas.width, canvas.height);
        dots.forEach(function(){
          var dot = this;
          if(Math.abs(dot.dx - dot.x) < 0.05 && Math.abs(dot.dy - dot.y) < 0.05 && Math.abs(dot.dz - dot.z) < 0.05 ){
            dot.x = dot.dx;
            dot.y = dot.dy;
            dot.z = dot.dz;
          }else{
            // 這邊是設定要回到原本文字的軌跡( 回去的直線距離 )
            // 每次移動的距離
            dot.x = dot.x + ( dot.dx - dot.x ) * 0.05;
            dot.y = dot.y + ( dot.dy - dot.y ) * 0.05;
            dot.z = dot.z + ( dot.dz - dot.z ) * 0.05;
            lastTime = +new Date();
          }
          dot.paint();
        });

        if (!pause) {
          if ("requestAnimationFrame" in window) {
            requestAnimationFrame(animate);
          }
          else if ("webkitRequestAnimationFrame" in window) {
            webkitRequestAnimationFrame(animate);
          }
          else if ("msRequestAnimationFrame" in window) {
            msRequestAnimationFrame(animate);
          }
          else if ("mozRequestAnimationFrame" in window) {
            mozRequestAnimationFrame(animate);
          }
        }
      }
    }

    Array.prototype.forEach = function(callback){
      for(var i = 0; i < this.length; i++){
        callback.call(this[i]);
      }
    }
    // 設定物件屬性
    var Dot = function(centerX, centerY, centerZ, radius) {
      // x, y, z & dz, dy, dz 等於 font 原本的位置
      this.dx = centerX;
      this.dy = centerY;
      this.dz = centerZ;
      this.tx = 0;
      this.ty = 0;
      this.tz = 0;
      this.z = centerZ;
      this.x = centerX;
      this.y = centerY;
      this.radius = radius;
    }

    Dot.prototype = {
      paint: function(){
        context.save();
        context.beginPath();
        var scale = focallength / ( focallength + this.z );
        context.arc( canvas.width / 2 + ( this.x - canvas.width / 2 ) * scale, canvas.height / 2 + ( this.y - canvas.height / 2 ) * scale, this.radius * scale, 0, 2 * Math.PI );
        context.fillStyle = `rgba(250, 50, 50,${scale})`;
        context.fill();
        context.restore();
      }
    }

    function getimgData(text){
      // 寫字
      context.save();
      context.font = "80px 微軟黑體 bold";
      context.fillStyle = "rgba( 168, 168, 168, 1 )";
      context.textAlign = "center";
      context.textBaseline = "middle";
      context.fillText(text, canvas.width / 2, canvas.height / 2 );
      context.restore();

      // 得到文字數據
      var imgData = context.getImageData(0, 0, canvas.width, canvas.height);
      context.clearRect(0, 0, canvas.width, canvas.height);
      var dots = [];
      for(var x = 0; x < imgData.width; x += 3){
        for(var y = 0; y < imgData.height; y += 3){
          var i = (y * imgData.width + x) * 4;
          if(imgData.data[i] >= 128){
            // 設定所有圓球的中心點
            var dot = new Dot(x-1, y-2, 0, 1);
            dots.push(dot);
          }
        }
      }
      return dots;
    }
  })
</script>

<script>
  var tagEle = "querySelectorAll" in document ? document.querySelectorAll(".tag") : getClass("tag"),
    paper = "querySelectorAll" in document ? document.querySelector(".tagBall") : getClass("tagBall")[0],
    RADIUS = 180,
    fallLength = 500,
    tags = [],
    angleX = Math.PI / 500,
    angleY = Math.PI / 500,
    CX = paper.offsetWidth /  2,
    CY = paper.offsetHeight / 2,
    EX = paper.offsetLeft + document.documentElement.scrollLeft,
    EY = paper.offsetTop + document.documentElement.scrollTop;
  
  function getClass(className){
    var ele = document.getElementsByTagName("*");
    var classEle = [];
    for(var i = 0; i < ele.length ; i++ ){
      var cn = ele[i].className;
      if(cn === className){
        classEle.push(ele[i]);
      }
    }
    return classEle;
  }

  function innit(){
    for(var i = 0; i < tagEle.length; i++){
      var a, b;
      var k = -1 + (2 * (i + 1) - 1) / tagEle.length;
      var a = Math.acos(k);
      var b = a * Math.sqrt(tagEle.length * Math.PI);
      var x = RADIUS * Math.sin(a) * Math.cos(b);
      var y = RADIUS * Math.sin(a) * Math.sin(b);
      var z = RADIUS * Math.cos(a);
      var t = new tag(tagEle[i], x, y, z);
      tagEle[i].style.color = `rgb(${parseInt(Math.random() * 255)}, ${parseInt(Math.random() * 255)}, ${parseInt(Math.random() * 255)})`;
      tags.push(t);
      t.move();
    }
  }

  Array.prototype.forEach = function(callback){
    for(var i = 0; i < this.length; i++){
      callback.call(this[i]);
    }
  }

  function animate(){
    rotateX();
    rotateY();
    tags.forEach(function() {
      this.move();
    });
    requestAnimationFrame(animate);
  }

  function rotateX(){
    var cos = Math.cos(angleX);
    var sin = Math.sin(angleX);
    tags.forEach(function(){
      var y1 = this.y * cos - this.z * sin;
      var z1 = this.z * cos + this.y * sin;
      this.y = y1;
      this.z = z1;
    })
  }

  function rotateY(){
    var cos = Math.cos(angleY);
    var sin = Math.sin(angleY);
    tags.forEach(function(){
      var x1 = this.x * cos - this.z * sin;
      var z1 = this.z * cos + this.x * sin;
      this.x = x1;
      this.z = z1;
    })
  }

  var tag = function(ele, x, y, z){
    this.ele = ele;
    this.x = x;
    this.y = y;
    this.z = z;
  }

  tag.prototype = {
    move: function(){
      var scale = fallLength / (fallLength - this.z);
      var alpha = (this.z + RADIUS) / (2 * RADIUS);
      var left = this.x + CX - this.ele.offsetWidth / 2 + "px";
      var top = this.y + CY - this.ele.offsetHeight / 2 + "px";
      var transform = `translate(${left}, ${top}) scale(${scale})`;
      this.ele.style.opacity = alpha + 0.5;
      this.ele.style.zIndex = parseInt(scale * 100);
      this.ele.style.transform = transform;
      this.ele.style.webkitTransform = transform;
    }
  }
  innit();
  animate();
  
</script>